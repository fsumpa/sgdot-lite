# OPTIMIZING ALGORITHM PARAMETERS

# ---------------------------------------------------------------- #
[MST]
# This specifies which algorithm should be used for linking the hubs with Minimum Spanning Tree
algorithm_linking_hubs: Kruskal 


# ----------------------------------------------------------------#
[SA]

# This parameter defines the cooling rate (typically between 0.7 and 0.95)	
# type: float (in [0,1])
cooling_rate = 0.95

# Initial temperature parameter (depend on the price difference between
# neighbouring configurations)
#type: float (in Z+)
t_0 = 20

# Number of temperature steps
# type: number_of_t_values: int
number_of_t_values = 30

# Number of flip repetitions per temperature step
# type: int
flip_rep = 1

# Number of swap repetitions per temperature step
# type: int
swap_rep = 3

# The swap_option parameter defines how households
# should be selected for swaps
#	Possible options are:
#		-> 'random': picks household uniformly at random
#		-> 'nearest_neighbour': picks closest household to selected meterhub
# type: str
swap_option = 'random'



# ----------------------------------------------------------------#
[GA]

# The input of the genetic algorithm is a list real numbers
# between 0 and 1 that correspond to either 'household' or
# 'meterhub' depending the hub_fraction_threshold parameter.
# If the n th element of the list which is larger than the
# threshold parameter, the n th node in the filtered _nodes
# DataFrame (containing only nodes with type_fixed == False)
# will be assigned to 'household'. Otherwise, the node_type
# of the node is assigned to 'meterhub'
# type: float (in [0,1])
hub_fraction_threshold = 0.3


# Parameter that is used to put constraint to the grid by applying
# a penalty to the fitness function (price fucntion of the grid)
# when the fraction of hub is higher than a threshold given by the
# occupation (number of households assigned to the hub) and the
# number of households. The parameter pushes the grid configuration
# to have a average hub occupation fraction higher than the value of
# min_avg_hub_occupation_fraction.
# type: float (in [0, 1])
min_avg_hub_occupation_fraction = 0.5

#The termination criterion of geneticalgorithm. If this parameter's
# value is None the algorithm sets maximum number of iterations
# automatically as a function of the dimension, boundaries, and
# population size. The user may enter any number of iterations
# that they want. It is highly recommended that the user themselves
# determines the max_num_iterations and not to use None.
# type: int
max_num_iteration = 50


# determines the number of trial solutions in each
# iteration. The default value is 100
# type: int
population_size = 10

# determines the chance of each gene in each individual solution
# to be replaced by a random value. The default is 0.1
# (i.e. 10 percent).
# type: float in ([0, 1])
mutation_probability = 0.2

# determines the number of elites in the population. The default
# value is 0.01 (i.e. 1 percent). For example when population size
# is 100 and elit_ratio is 0.01 then there is one elite in the
# population. If this parameter is set to be zero then
# geneticalgorithm implements a standard genetic algorithm
# instead of elitist GA.
# type: float (in [0, 1])
elit_ratio = 0.01


# determines the chance of an existed solution to pass its genome
# (aka characteristics) to new trial solutions (aka offspring);
# the default value is 0.5 (i.e. 50 percent)
#type: float (in [0, 1])
crossover_probability = 0.5

# the portion of population filled by the members of the previous
# generation (aka parents); default is 0.3 (i.e. 30 percent of population)
# type: float (in [0, 1])
parents_portion = 0.3

# there are three options including one_point; two_point, and uniform
# crossover functions; default is uniform crossover
# type: str
crossover_type = two_point

# if the algorithms does not improve the objective function over
# the number of successive iterations determined by this
# parameter, then geneticalgorithm stops and report the best found
# solution before the max_num_iterations to be met. The default
# value is None
# type: int
max_iteration_without_improv = 100

