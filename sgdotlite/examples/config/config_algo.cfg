# OPTIMIZING ALGORITHM PARAMETERS


# ---------------------------------------------------------------- #
[MST]
# This specifies which algorithm should be used for linking the hubs with Minimum Spanning Tree
algorithm_linking_hubs = Kruskal 

# ---------------------------------------------------------------- #
[SA]

# average probability to accept a transition increasing the price
# at the first temperature step. This parameter is used to compute the
# initial temperature
# type: float in [0,1]
initial_acceptance_probability = 0.75

# Algorithm is # interupted at the end of the temperature step if run time
# exeeds runtime.
runtime = 1000

# Number of flip repetitions per temperature step
# type: int
flip_rep = 1

# Number of swap repetitions per temperature step
# type: int
swap_rep = 3

# The swap_option parameter defines how households
# should be selected for swaps
#	Possible options are:
#		-> 'random': picks household uniformly at random
#		-> 'nearest_neighbour': picks closest household to selected meterhub
# type: str
swap_option = 'random'


# ----------------------------------------------------------------#
[GA]

# Determines how many generations the GA should run for
number_of_generations = 2

# determines the number of trial solutions in each
# iteration.
# type: int
population_size = 4

# determines the chance of each gene in each individual solution
# to be replaced by a random value.
# type: float in ([0, 1])
mutation_probability = 0

#Determines the average ratio of mutations that consist on replacing
#a hub over mutations adding or removing a hub.
#For mutation_type_ratio = 0.5, on average, half of the mutation
#selected will be replacing mutations. A forth of the mutation will
#corespond to adding a hub and the other forth to removing a hub.
#For mutation_type_ratio = 1, all the mutations are mutations
#replacing hub indices.
mutation_type_ratio=0.75

# determines the number of elites in the population.
# type: int
number_of_elites = 0


# determines the number of chromosomes that are not elites and will
# be copied to the next generation
# type: int
number_of_survivors = 0

# determines the type of crossover (i.e. how the genes are transmitted from
# the parents to the offsprings)
# possibilities are:
#       - 'uniform': genes are shuffled are distributed among the offsprings
#       - 'neighbor_pair': pairs of hubs from each parent are created in such
#                          a way that each hubs appear in one pair and that
#                          the distance bewteen hubs of all pairs is minimized
crossover_type = neighbor_pair

# Determines how many processors should be used in parallel for the
# concerned of the algorithm. The multiprocessing is done using
# the Pool function from the multiprocessing library.
number_of_processors_for_parallelization = 4

# determines how parent chromosomes are being picked.
# possibilites are:
#       - 'linear_rank_selection': parent with rank k is picked with probability
#          N-k+1)/S where N is the population size and S the sum of the first
#          N natural numbers
parent_selection = linear_rank_selection

# This patameter is used to obtain the value of the standard deviation
# considered for determining the number of hubs in the chromosomes of
# the initial population. The standard deviation sigma is computed as
# follow:  sigma = n* / delta
#         where n* is the expected number of hubs in the network computed
#         using the function get_expected_hub_number_from_k_means().
delta = 5


# Maximum allowed run time in seconds for the algo. Algorithm is
# interupted at the end of generation if run time exeeds max_run_time.
max_run_time = 3600
